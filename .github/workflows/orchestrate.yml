name: Orchestrate microservices (init DB + Render deploy + gateway)

on:
  workflow_dispatch:
    inputs:
      # Images
      img_clients:
        description: "Image clients"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-clients:latest"
      img_commandes:
        description: "Image commandes"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-commandes:latest"
      img_produits:
        description: "Image produits"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-produits:latest"
      # DB URLs
      db_clients:
        description: "DATABASE_URL clients"
        required: true
      db_commandes:
        description: "DATABASE_URL commandes"
        required: true
      db_produits:
        description: "DATABASE_URL produits"
        required: true
      # Render deploy hooks
      hook_clients:
        description: "Render hook clients"
        required: true
      hook_commandes:
        description: "Render hook commandes"
        required: true
      hook_produits:
        description: "Render hook produits"
        required: true
      # URLs publiques (optionnel)
      url_clients:
        description: "URL publique clients"
        required: false
        default: ""
      url_commandes:
        description: "URL publique commandes"
        required: false
        default: ""
      url_produits:
        description: "URL publique produits"
        required: false
        default: ""
      wait_timeout:
        description: "Timeout readiness (s)"
        required: true
        default: "600"
      # Gateway
      build_gateway:
        description: "Build/push gateway ?"
        required: true
        default: false
        type: boolean
      gateway_image:
        description: "Image gateway"
        required: false
        default: "ghcr.io/mgaisnon/mspr-api-gateway:latest"
      gateway_hook:
        description: "Render hook gateway"
        required: false
        default: ""

permissions:
  contents: read
  packages: write

jobs:
  init-and-deploy:
    runs-on: ubuntu-latest
    env:
      REG: ghcr.io
      IMG_CLI:   ${{ inputs.img_clients }}
      IMG_CMD:   ${{ inputs.img_commandes }}
      IMG_PROD:  ${{ inputs.img_produits }}
      DB_CLI:    ${{ inputs.db_clients }}
      DB_CMD:    ${{ inputs.db_commandes }}
      DB_PROD:   ${{ inputs.db_produits }}
      HOOK_CLI:  ${{ inputs.hook_clients }}
      HOOK_CMD:  ${{ inputs.hook_commandes }}
      HOOK_PROD: ${{ inputs.hook_produits }}
      URL_CLI:   ${{ inputs.url_clients }}
      URL_CMD:   ${{ inputs.url_commandes }}
      URL_PROD:  ${{ inputs.url_produits }}
      WAIT:      ${{ inputs.wait_timeout }}

    steps:
      - uses: actions/checkout@v4

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull images
        run: |
          set -e
          docker pull "$(echo "$IMG_CLI"  | tr '[:upper:]' '[:lower:]')"
          docker pull "$(echo "$IMG_CMD"  | tr '[:upper:]' '[:lower:]')"
          docker pull "$(echo "$IMG_PROD" | tr '[:upper:]' '[:lower:]')"

      - name: wait_for_db helper
        id: helper
        run: |
          cat > wait_for_db.py <<'PY'
            import os, sys, time
            from sqlalchemy import create_engine, text
            url = sys.argv[1]; timeout = int(sys.argv[2])
            end = time.time() + timeout
            while time.time() < end:
                try:
                    eng = create_engine(url, pool_pre_ping=True)
                    with eng.connect() as c: c.execute(text("SELECT 1"))
                    print("DB ready"); sys.exit(0)
                except Exception as e:
                    print("DB not ready:", e)
                    time.sleep(3)
            print("Timeout"); sys.exit(1)
            PY

      - name: Init DB (clients)
        run: |
          python wait_for_db.py "$DB_CLI" "$WAIT"
          docker run --rm -e DATABASE_URL="$DB_CLI" "$IMG_CLI" python -m app.init_db

      - name: Init DB (commandes)
        run: |
          python wait_for_db.py "$DB_CMD" "$WAIT"
          docker run --rm -e DATABASE_URL="$DB_CMD" "$IMG_CMD" python -m app.init_db

      - name: Init DB (produits)
        run: |
          python wait_for_db.py "$DB_PROD" "$WAIT"
          docker run --rm -e DATABASE_URL="$DB_PROD" "$IMG_PROD" python -m app.init_db

      - name: Trigger Render deploy (clients)
        run: |
          python - <<'PY'
            import os, urllib.parse, urllib.request
            hook=os.environ["HOOK_CLI"]; img=os.environ["IMG_CLI"]
            print("Deploy clients:", img)
            print(urllib.request.urlopen(hook + "?imgURL=" + urllib.parse.quote(img)).read())
            PY

      - name: Trigger Render deploy (commandes)
        run: |
          python - <<'PY'
            import os, urllib.parse, urllib.request
            hook=os.environ["HOOK_CMD"]; img=os.environ["IMG_CMD"]
            print("Deploy commandes:", img)
            print(urllib.request.urlopen(hook + "?imgURL=" + urllib.parse.quote(img)).read())
            PY

      - name: Trigger Render deploy (produits)
        run: |
          python - <<'PY'
            import os, urllib.parse, urllib.request
            hook=os.environ["HOOK_PROD"]; img=os.environ["IMG_PROD"]
            print("Deploy produits:", img)
            print(urllib.request.urlopen(hook + "?imgURL=" + urllib.parse.quote(img)).read())
            PY

      - name: Wait clients
        if: ${{ inputs.url_clients != '' }}
        run: |
          end=$((SECONDS + WAIT))
          while [ $SECONDS -lt $end ]; do
            curl -fsS "${URL_CLI}/health" || curl -fsS "${URL_CLI}/docs" || curl -fsS "${URL_CLI}/" && exit 0
            sleep 5
          done
          echo "Timeout clients"; exit 1

      - name: Wait commandes
        if: ${{ inputs.url_commandes != '' }}
        run: |
          end=$((SECONDS + WAIT))
          while [ $SECONDS -lt $end ]; do
            curl -fsS "${URL_CMD}/health" || curl -fsS "${URL_CMD}/docs" || curl -fsS "${URL_CMD}/" && exit 0
            sleep 5
          done
          echo "Timeout commandes"; exit 1

      - name: Wait produits
        if: ${{ inputs.url_produits != '' }}
        run: |
          end=$((SECONDS + WAIT))
          while [ $SECONDS -lt $end ]; do
            curl -fsS "${URL_PROD}/health" || curl -fsS "${URL_PROD}/docs" || curl -fsS "${URL_PROD}/" && exit 0
            sleep 5
          done
          echo "Timeout produits"; exit 1

  gateway:
    runs-on: ubuntu-latest
    needs: [init-and-deploy]
    if: ${{ inputs.build_gateway }}
    env:
      GATEWAY_IMG: ${{ inputs.gateway_image }}
      GATEWAY_HOOK: ${{ inputs.gateway_hook }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push gateway
        run: |
          docker build -t "$(echo "$GATEWAY_IMG" | tr '[:upper:]' '[:lower:]')" gateway
          docker push "$(echo "$GATEWAY_IMG" | tr '[:upper:]' '[:lower:]')"
      - name: Trigger gateway deploy (Render)
        if: ${{ env.GATEWAY_HOOK != '' }}
        run: |
          python - <<'PY'
            import os, urllib.parse, urllib.request
            hook=os.environ["GATEWAY_HOOK"]; img=os.environ["GATEWAY_IMG"]
            print("Deploy gateway:", img)
            print(urllib.request.urlopen(hook + "?imgURL=" + urllib.parse.quote(img)).read())
            PY

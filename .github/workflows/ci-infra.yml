name: CI Infra (Compose)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      img_api_clients:
        description: "Image clients"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-clients:latest"
      img_api_produits:
        description: "Image produits"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-produits:latest"
      img_api_commandes:
        description: "Image commandes"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-commandes:latest"
      scan_images:
        description: "Scanner les images avec Trivy"
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write

jobs:
  compose-validate-and-test:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - uses: actions/checkout@v4

      - name: Show Docker & Compose versions
        run: |
          docker version
          docker compose version

      - name: Lint YAML (compose)
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yml
        continue-on-error: true

      - name: Validate compose config (with CI override)
        run: |
          cp .env.ci.sample .env.ci || true
          export $(grep -v '^#' .env.ci | xargs) || true
          # Inputs > .env.ci
          [ -n "${{ github.event.inputs.img_api_clients }}" ] && IMG_API_CLIENTS="${{ github.event.inputs.img_api_clients }}"
          [ -n "${{ github.event.inputs.img_api_produits }}" ] && IMG_API_PRODUITS="${{ github.event.inputs.img_api_produits }}"
          [ -n "${{ github.event.inputs.img_api_commandes }}" ] && IMG_API_COMMANDES="${{ github.event.inputs.img_api_commandes }}"
          export IMG_API_CLIENTS IMG_API_PRODUITS IMG_API_COMMANDES
          docker compose -f docker-compose.yml -f ci/docker-compose.ci.yml config

      - name: Pull images (faster startup)
        run: |
          docker pull "${{ github.event.inputs.img_api_clients || 'ghcr.io/mgaisnon/mspr-api-clients:latest' }}" || true
          docker pull "${{ github.event.inputs.img_api_produits || 'ghcr.io/mgaisnon/mspr-api-produits:latest' }}" || true
          docker pull "${{ github.event.inputs.img_api_commandes || 'ghcr.io/mgaisnon/mspr-api-commandes:latest' }}" || true

      - name: Up stack (detached)
        run: |
          set -euo pipefail
          export IMG_API_CLIENTS="${{ github.event.inputs.img_api_clients || 'ghcr.io/mgaisnon/mspr-api-clients:latest' }}"
          export IMG_API_PRODUITS="${{ github.event.inputs.img_api_produits || 'ghcr.io/mgaisnon/mspr-api-produits:latest' }}"
          export IMG_API_COMMANDES="${{ github.event.inputs.img_api_commandes || 'ghcr.io/mgaisnon/mspr-api-commandes:latest' }}"
          docker compose -f docker-compose.yml -f ci/docker-compose.ci.yml up -d
          docker compose ps

      - name: Wait for core deps (RabbitMQ + DBs)
        run: |
          set -e
          # attend les healthchecks si dÃ©finis, sinon ping simple
          for i in {1..30}; do
            docker inspect --format='{{json .State.Health.Status}}' rabbitmq 2>/dev/null | grep -q healthy && break || true
            sleep 5
          done || true
          sleep 10

      - name: Smoke tests - ports ouverts
        run: |
          set -e
          curl -fsS http://localhost:8001/ || (docker compose logs api-clients && exit 1)
          curl -fsS http://localhost:8002/ || (docker compose logs api-commandes && exit 1)
          curl -fsS http://localhost:8003/ || (docker compose logs api-produits && exit 1)
          curl -fsS http://localhost:15672/ || (docker compose logs rabbitmq && exit 1)
          curl -fsS http://localhost:9090/  || (docker compose logs prometheus && exit 1)
          curl -fsS http://localhost:3000/  || (docker compose logs grafana && exit 1)

      - name: Dump service logs on failure
        if: failure()
        run: docker compose logs --no-color

      - name: Down stack (always)
        if: always()
        run: docker compose -f docker-compose.yml -f ci/docker-compose.ci.yml down -v

  trivy-scan:
    name: Trivy (optional)
    runs-on: ubuntu-latest
    needs: [compose-validate-and-test]
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.scan_images == 'true' }}
    steps:
      - uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "image"
          image-ref: ${{ github.event.inputs.img_api_clients }}
          format: "table"
          severity: "CRITICAL,HIGH"
      - uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "image"
          image-ref: ${{ github.event.inputs.img_api_produits }}
          format: "table"
          severity: "CRITICAL,HIGH"
      - uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "image"
          image-ref: ${{ github.event.inputs.img_api_commandes }}
          format: "table"
          severity: "CRITICAL,HIGH"

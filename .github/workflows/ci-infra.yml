name: CI Infra (Compose)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      img_api_clients:
        description: "Image clients"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-clients:latest"
      img_api_produits:
        description: "Image produits"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-produits:latest"
      img_api_commandes:
        description: "Image commandes"
        required: true
        default: "ghcr.io/mgaisnon/mspr-api-commandes:latest"
      scan_images:
        description: "Scanner les images avec Trivy"
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write

jobs:
  compose-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Prepare CI images"
        id: imgs
        shell: bash
        run: |
          C="${{ github.event.inputs.img_api_clients || 'ghcr.io/mgaisnon/mspr-api-clients:latest' }}"
          P="${{ github.event.inputs.img_api_produits || 'ghcr.io/mgaisnon/mspr-api-produits:latest' }}"
          O="${{ github.event.inputs.img_api_commandes || 'ghcr.io/mgaisnon/mspr-api-commandes:latest' }}"
          echo "clients=$C"   >> $GITHUB_OUTPUT
          echo "produits=$P"  >> $GITHUB_OUTPUT
          echo "commandes=$O" >> $GITHUB_OUTPUT

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Generate CI compose (remove build, set images)
        env:
          IMG_API_CLIENTS:  ${{ steps.imgs.outputs.clients }}
          IMG_API_PRODUITS: ${{ steps.imgs.outputs.produits }}
          IMG_API_COMMANDES: ${{ steps.imgs.outputs.commandes }}   # ðŸ‘ˆ (corrigÃ©: espace aprÃ¨s :)
        run: |
          set -euo pipefail
          yq e 'del(.services[].build)' docker-compose.yml > docker-compose.ci.yml
          yq e -i '
            .services["api-clients"].image   = strenv(IMG_API_CLIENTS)   |
            .services["api-produits"].image  = strenv(IMG_API_PRODUITS)  |
            .services["api-commandes"].image = strenv(IMG_API_COMMANDES)
          ' docker-compose.ci.yml
          echo "---- CI Compose ----"
          cat docker-compose.ci.yml

      - name: Validate compose config
        run: docker compose -f docker-compose.ci.yml config

      - name: Pull images (optional)
        run: |
          docker pull "${{ steps.imgs.outputs.clients }}"   || true
          docker pull "${{ steps.imgs.outputs.produits }}"  || true
          docker pull "${{ steps.imgs.outputs.commandes }}" || true

      - name: Up stack (detached)
        run: |
          docker compose -f docker-compose.ci.yml up -d
          docker compose -f docker-compose.ci.yml ps

      - name: Smoke tests
        run: |
          set -e
          curl -fsS http://localhost:8001/ || (docker compose -f docker-compose.ci.yml logs api-clients && exit 1)
          curl -fsS http://localhost:8002/ || (docker compose -f docker-compose.ci.yml logs api-commandes && exit 1)
          curl -fsS http://localhost:8003/ || (docker compose -f docker-compose.ci.yml logs api-produits && exit 1)
          curl -fsS http://localhost:15672/ || (docker compose -f docker-compose.ci.yml logs rabbitmq && exit 1)
          curl -fsS http://localhost:9090/  || (docker compose -f docker-compose.ci.yml logs prometheus && exit 1)
          curl -fsS http://localhost:3000/  || (docker compose -f docker-compose.ci.yml logs grafana && exit 1)

      - name: Dump logs on failure
        if: failure()
        run: docker compose -f docker-compose.ci.yml logs --no-color

      - name: Down stack
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v

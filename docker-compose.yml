services:
  # Message Broker: RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  # DB pour Clients
  db-clients:
    image: postgres:16
    container_name: db-clients
    environment:
      POSTGRES_USER: clientuser
      POSTGRES_PASSWORD: clientpass
      POSTGRES_DB: clientsdb
    ports:
      - "5433:5432"
    volumes:
      - db_clients_data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clientuser -d clientsdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  # API Clients
  api-clients:
    image: ${IMG_API_CLIENTS:?set IMG_API_CLIENTS}
    build: null
    environment:
      DATABASE_URL: postgresql://clientuser:clientpass@db-clients:5432/clientsdb
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - db-clients
      - rabbitmq

  # DB pour Produits
  db-produits:
    image: postgres:16
    container_name: db-produits
    environment:
      POSTGRES_USER: produituser
      POSTGRES_PASSWORD: produitpass
      POSTGRES_DB: produitsdb
    ports:
      - "5435:5432"
    volumes:
      - db_produits_data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U produituser -d produitsdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  # API Produits
  api-produits:
    image: ${IMG_API_PRODUITS:?set IMG_API_PRODUITS}
    build: null
    environment:
      DATABASE_URL: postgresql://produituser:produitpass@db-produits:5432/produitsdb
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - db-produits
      - rabbitmq

  db-commandes:
    image: postgres:16
    container_name: db-commandes
    environment:
      POSTGRES_USER: commandeuser
      POSTGRES_PASSWORD: commandepass
      POSTGRES_DB: commandesdb
    ports:
      - "5436:5432"
    volumes:
      - db_commandes_data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U commandeuser -d commandesdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  # API Commandes
  api-commandes:
    image: ${IMG_API_COMMANDES:?set IMG_API_COMMANDES}
    build: null
    environment:
      DATABASE_URL: postgresql://commandeuser:commandepass@db-commandes:5432/commandesdb
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - db-commandes
      - rabbitmq

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - rabbitmq
      - api-clients
      - api-produits
      - api-commandes
    networks:
      - net

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - net

volumes:
  rabbitmq_data:
  db_clients_data:
  db_produits_data:
  db_commandes_data:
  prometheus_data:
  grafana_data:

networks:
  net:
    driver: bridge
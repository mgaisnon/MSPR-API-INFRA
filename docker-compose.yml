services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api.dashboard=true"
      - "--api.insecure=true"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.localhost`)"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  db-clients:
    image: postgres:16
    container_name: db-clients
    environment:
      POSTGRES_USER: clientuser
      POSTGRES_PASSWORD: clientpass
      POSTGRES_DB: clientsdb
    ports:
      - "5433:5432"
    volumes:
      - db_clients_data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clientuser -d clientsdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  api-clients:
    container_name: api-clients
    image: ${IMG_API_CLIENTS:?set IMG_API_CLIENTS}
    environment:
      DATABASE_URL: ${DATABASE_URL_CLIENTS}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      - db-clients
      - rabbitmq
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-clients.rule=Host(`clients.localhost`)"
      - "traefik.http.services.api-clients.loadbalancer.server.port=8000"

  db-produits:
    image: postgres:16
    container_name: db-produits
    environment:
      POSTGRES_USER: produituser
      POSTGRES_PASSWORD: produitpass
      POSTGRES_DB: produitsdb
    ports:
      - "5435:5432"
    volumes:
      - db_produits_data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U produituser -d produitsdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  api-produits:
    container_name: api-produits
    image: ${IMG_API_PRODUITS:?set IMG_API_PRODUITS}
    environment:
      DATABASE_URL: ${DATABASE_URL_PRODUITS}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      - db-produits
      - rabbitmq
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-produits.rule=Host(`produits.localhost`)"
      - "traefik.http.services.api-produits.loadbalancer.server.port=8000"

  db-commandes:
    image: postgres:16
    container_name: db-commandes
    environment:
      POSTGRES_USER: commandeuser
      POSTGRES_PASSWORD: commandepass
      POSTGRES_DB: commandesdb
    ports:
      - "5436:5432"
    volumes:
      - db_commandes_data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U commandeuser -d commandesdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  api-commandes:
    container_name: api-commandes
    image: ${IMG_API_COMMANDES:?set IMG_API_COMMANDES}
    environment:
      DATABASE_URL: ${DATABASE_URL_COMMANDES}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      - db-commandes
      - rabbitmq
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-commandes.rule=Host(`commandes.localhost`)"
      - "traefik.http.services.api-commandes.loadbalancer.server.port=8000"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - rabbitmq
      - api-clients
      - api-produits
      - api-commandes
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

volumes:
  rabbitmq_data:
  db_clients_data:
  db_produits_data:
  db_commandes_data:
  prometheus_data:
  grafana_data:

networks:
  net:
    driver: bridge
user  nginx;
worker_processes auto;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile      on;
  keepalive_timeout  65;

  # Pour X-Forwarded-* corrects
  real_ip_header X-Forwarded-For;

  # WebSocket upgrade
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # Upstreams privés (Fly 6PN)
  upstream clients_api {
    server mspr-api-clients.internal:8080;
    keepalive 16;
  }

  upstream produits_api {
    server mspr-api-produits.internal:8080;
    keepalive 16;
  }

  upstream commandes_api {
    server mspr-api-commandes.internal:8080;
    keepalive 16;
  }

  # (Option) Page par défaut
  server {
    listen 80 default_server;
    server_name _;

    # Santé de Nginx
    location = /nginx/health {
      return 200 'ok';
      add_header Content-Type text/plain;
    }

  # timeouts pour éviter de bloquer si un backend est KO
    proxy_connect_timeout 2s;
    proxy_send_timeout    10s;
    proxy_read_timeout    10s;

    # Proxy headers communs
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Upgrade           $http_upgrade;
    proxy_set_header Connection        $connection_upgrade;

    # Clients
    location /api/clients/ {
      # attention au trailing slash : garde /api/clients/ côté service
      proxy_pass http://mspr-api-clients.fly.dev;
    }

    # Produits
    location /api/produits/ {
      proxy_pass http://mspr-api-produits.fly.dev;
    }

    # Commandes
    location /api/commandes/ {
      proxy_pass http://mspr-apicommandes.fly.dev;
    }

    # (Option) CORS de base si ton front est ailleurs
    # add_header Access-Control-Allow-Origin "*" always;
    # add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;
    # add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;
    # if ($request_method = OPTIONS) { return 204; }
  }
}
